{"version":3,"sources":["List.js","NewItem.js","App.js","serviceWorker.js","index.js"],"names":["List","onItemRemove","onStatusChange","list","className","map","item","key","id","isDone","name","onClick","NewItem","onNewItemAdd","onFilterChange","setValue","value","onSubmit","e","preventDefault","autoFocus","type","placeholder","aria-label","onChange","target","App","useState","JSON","parse","localStorage","getItem","setList","selectedFilter","setSelectedFilter","useEffect","setItem","stringify","filteredItems","useMemo","filter","uniqid","prevList","i","findIndex","itemToUpdate","newList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ad00bb0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction List({ onItemRemove, onStatusChange, list }) {\r\n  return (\r\n    <ul className=\"list\">\r\n      {list.map((item) => (\r\n        <li key={item.id} className=\"item\">\r\n          <p className={`${item.isDone ? \"done\" : \"notDone\"} item-name`}>\r\n            {item.name}\r\n          </p>\r\n\r\n          <button onClick={() => onStatusChange(item.id)}>\r\n            <i className=\"far fa-check-square fa-2x btn-done\"></i>\r\n          </button>\r\n          <button onClick={() => onItemRemove(item.id)}>\r\n            <i className=\"far fa-minus-square fa-2x btn-remove\"></i>\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nfunction NewItem({ onNewItemAdd, onFilterChange, setValue, value }) {\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (value) {\r\n      onNewItemAdd(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    onFilterChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"form\">\r\n      <label className=\"new-text-input-label\">\r\n        <input\r\n          autoFocus\r\n          type=\"text\"\r\n          placeholder=\"Enter new task\"\r\n          aria-label=\"New task name\"\r\n          className=\"new-text-input\"\r\n          name=\"task\"\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n        />\r\n        <button type=\"submit\" aria-label=\"Add new task\" className=\"btn-add\">\r\n          <i className=\"far fa-plus-square fa-2x\"></i>\r\n        </button>\r\n      </label>\r\n      <select\r\n        onChange={handleSelectChange}\r\n        name=\"todos\"\r\n        aria-label=\"Filter tasks\"\r\n        className=\"filter-select\"\r\n      >\r\n        <option value=\"all\">All</option>\r\n        <option value=\"done\">Done</option>\r\n        <option value=\"notDone\">Not Done</option>\r\n      </select>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NewItem;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport List from \"./List\";\nimport NewItem from \"./NewItem\";\nimport \"./app.css\";\n\nimport uniqid from \"uniqid\";\n\nfunction App() {\n  const [list, setList] = useState(\n    JSON.parse(localStorage.getItem(\"list\")) ?? []\n  );\n  const [value, setValue] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n\n  useEffect(() => {\n    localStorage.setItem(\"list\", JSON.stringify(list));\n  }, [list]);\n\n  const filteredItems = useMemo(() => {\n    switch (selectedFilter) {\n      case \"done\":\n        return list.filter((item) => item.isDone);\n      case \"notDone\":\n        return list.filter((item) => !item.isDone);\n      default:\n        return list;\n    }\n  }, [list, selectedFilter]);\n\n  const handleNewItemAdd = (value) => {\n    setList([...list, { name: value, isDone: false, id: uniqid() }]);\n  };\n\n  const toggleItemStatus = (id) => {\n    setList((prevList) => {\n      const i = prevList.findIndex((item) => item.id === id);\n      const itemToUpdate = prevList[i];\n      const item = { ...itemToUpdate, isDone: !itemToUpdate.isDone };\n      const newList = [...list];\n      newList[i] = item;\n      return newList;\n    });\n  };\n\n  const removeItem = (id) => {\n    setList((prevList) => prevList.filter((item) => item.id !== id));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"header\">to-do list</h1>\n      </header>\n      <NewItem\n        onNewItemAdd={handleNewItemAdd}\n        onFilterChange={setSelectedFilter}\n        setValue={setValue}\n        value={value}\n      />\n      <List\n        onItemRemove={removeItem}\n        onStatusChange={toggleItemStatus}\n        list={filteredItems}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}